.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "ibv_query_qp_data_in_order" "3" "2020\-3\-3" "libibverbs" "Libibverbs Programmer\[aq]s Manual"
.hy
.SH NAME
.PP
ibv_query_qp_data_in_order \- check if qp data is guaranteed to be in
order.
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <infiniband/verbs.h>

int\ ibv_query_qp_data_in_order(struct\ ibv_qp\ *qp,\ enum\ ibv_wr_opcode\ op,\ uint32_t\ flags);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]ibv_query_qp_data_in_order()\f[] Checks whether WQE data is
guaranteed to be written in\-order, and thus reader may poll for data
instead of poll for completion.
This function indicates data is written in\-order within each WQE, but
cannot be used to determine ordering between separate WQEs.
This function describes ordering at the receiving side of the QP, not
the sending side.
.SH ARGUMENTS
.TP
.B \f[I]qp\f[]
.IP
.nf
\f[C]
The\ local\ queue\ pair\ (QP)\ to\ query.
\f[]
.fi
.RS
.RE
.TP
.B \f[I]op\f[]
.IP
.nf
\f[C]
The\ operation\ type\ to\ query\ about.\ Different\ operation\ types\ may\ write\ data\ in\ a\ different\ order.
\f[]
.fi
.RS
For RDMA read operations: describes ordering of RDMA reads posted on
this local QP.
For RDMA write operations: describes ordering of remote RDMA writes
being done into this local QP.
For RDMA send operations: describes ordering of remote RDMA sends being
done into this local QP.
This function should not be used to determine ordering of other
operation types.
.RE
.TP
.B \f[I]flags\f[]
Flags are used to select a query type.
Supported values:
.RS
.RE
.PP
IBV_QUERY_QP_DATA_IN_ORDER_RETURN_CAPS \- Query for supported
capabilities and return a capabilities vector.
.PP
Passing 0 is equivalent to using IBV_QUERY_QP_DATA_IN_ORDER_RETURN_CAPS
and checking for IBV_QUERY_QP_DATA_IN_ORDER_WHOLE_MSG support.
.SH RETURN VALUE
.PP
\f[B]ibv_query_qp_data_in_order()\f[] Return value is determined by
flags.
For each capability bit, 1 is returned if the data is guaranteed to be
written in\-order for selected operation and type, 0 otherwise.
If IBV_QUERY_QP_DATA_IN_ORDER_RETURN_CAPS flag is used, return value can
consist of following capabilities:
.PP
IBV_QUERY_QP_DATA_IN_ORDER_WHOLE_MSG \- All data is being written in
order.
.PP
IBV_QUERY_QP_DATA_IN_ORDER_ALIGNED_128_BYTES \- Each 128 bytes aligned
block is being written in order.
.PP
If flags is 0, the function will return 1 if
IBV_QUERY_QP_DATA_IN_ORDER_WHOLE_MSG is supported and 0 otherwise.
.SH NOTES
.PP
Return value is valid only when the data is read by the CPU and relaxed
ordering MR is not the target of the transfer.
.SH SEE ALSO
.PP
\f[B]ibv_query_qp\f[](3)
.SH AUTHOR
.PP
Patrisious Haddad <phaddad@nvidia.com>
.PP
Yochai Cohen <yochai@nvidia.com>
